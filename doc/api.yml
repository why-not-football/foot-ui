openapi: "3.0.3"
info:
  title: Why not football ?
  version: "1.0"
servers:
  - url: https://localhost:8080
security:
  - BearerAuth: []

paths:
  /login:
    post:
      tags:
        - "security"
      operationId: Login
      summary: login to the server
      description: login username by name and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
  /whoami:
    get:
      tags:
        - "security"
      operationId: Whoami
      summary: get current logged user
      description: get current logged user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /user:
    put:
      tags:
        - "user"
      operationId: CreateOrUpdateUser
      summary: create User
      description: create User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /user/id/{userId}:
    get:
      tags:
        - "user"
      operationId: getUserById
      summary: get user by id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /user/name/{userName}:
    get:
      tags:
        - "user"
      operationId: getUserByUsername
      summary: get user by name
      parameters:
        - name: userName
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /booking:
    put:
      tags:
        - "booking"
      operationId: createBooking
      summary: command a reservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
    get:
      tags:
        - "booking"
      operationId: getAllBooking
      summary: get all booking
      parameters:
        - name: ownerId
          in: query
          required: false
          schema:
            type: integer
        - name: tournamentId
          in: query
          required: false
          schema:
            type: integer
        - name: datetime
          in: query
          required: false
          schema:
            type: string
        - name: stadiumId
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Booking"
  /tournament:
    put:
      tags:
        - "tournament"
      operationId: CreateOrUpdateTournament
      summary: create tournament
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tournament"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tournament"
    get:
      tags:
        - "tournament"
      operationId: getAllTournament
      summary: get all tournament
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Tournament"
  /tournament/{idTournament}/teams:
    get:
      tags:
        - "tournament"
      operationId: getAllTournamentTeams
      summary: get all team in one tournament
      parameters:
        - name: idTournament
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Team"
  /tournament/team:
    put:
      tags:
        - "tournament"
      operationId: createOrUpdateTeam
      summary: create team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Team"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
  /tournament/play:
    put:
      tags:
        - "tournament"
      operationId: CreateOrUpdatePlayAgainst
      summary: Create play against
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayAgainst"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayAgainst"
    get:
      tags:
        - "tournament"
      operationId: getTournamentMatch
      summary: get tournament match
      parameters:
        - name: date
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayAgainst"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      properties:
        id:
          type: integer
        username:
          type: string
        phone:
          type: string
        role:
          $ref: "#/components/schemas/EnableRole"
    EnableRole:
      type: string
      enum:
        - ADMIN
        - SIMPLE

    LoginInfo:
      properties:
        username:
          type: string
        password:
          type: string
    LoginResponse:
      properties:
        token:
          type: string
    Booking:
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
        startDatetime:
          type: string
          format: date-time
        endDatetime:
          type: string
          format: date-time
        owner:
          type: string
        phone:
          type: integer
        paying:
          $ref: "#/components/schemas/EnablePaying"
        status:
          $ref: "#/components/schemas/EnableBooking"
    Tournament:
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        phone:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    Team:
      properties:
        id:
          type: integer
        name:
          type: string
    PlayAgainst:
      properties:
        id:
          type: integer
        teams:
          type: array
          items:
            $ref: "#/components/schemas/Team"
        startDatetime:
          type: string
          format: date-time
        endDatetime:
          type: string
          format: date-time
        tournament:
          properties:
            id:
              type: integer
            name:
              type: string
        phase:
          $ref: "#/components/schemas/EnablePhase"
        stadium:
          $ref: "#/components/schemas/Stadium"
        status:
          $ref: "#/components/schemas/EnableBooking"
    EnablePhase:
      type: string
      enum:
        - POOL
        - QUARTER_FINAL
        - SEMI_FINAL
        - FINAL
    Stadium:
      properties:
        id:
          type: integer
        name:
          type: string
    EnablePaying:
      type: string
      enum:
        - CASH
    EnableBooking:
      type: string
      enum:
        - COMMING_SOOM
        - TERMINATE
        - CANCELLED
